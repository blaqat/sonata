/// <reference types="node" />
import * as fs from "fs";
import api from "../API";
import { SoundcloudTrack, SoundcloudTrackV2 } from "../types";
export declare class Util {
    private readonly api;
    private readonly playlists;
    private readonly users;
    private readonly tracks;
    constructor(api: api);
    /**
     * Gets the direct streaming link of a track.
     */
    streamLink: (songUrl: string) => Promise<string>;
    /**
     * Downloads the mp3 stream of a track.
     */
    downloadTrackStream: (songUrl: string, title: string, folder: string) => Promise<string>;
    /**
     * Gets a track title from the page
     */
    getTitle: (songUrl: string) => Promise<any>;
    /**
     * Downloads a track on Soundcloud.
     */
    downloadTrack: (trackResolvable: string | SoundcloudTrack | SoundcloudTrackV2, folder?: string) => Promise<string>;
    /**
     * Downloads an array of tracks.
     */
    downloadTracks: (tracks: string[] | SoundcloudTrackV2[] | SoundcloudTrack[], dest?: string, limit?: number) => Promise<string[]>;
    /**
     * Downloads all the tracks from the search query.
     */
    downloadSearch: (query: string, dest?: string, limit?: number) => Promise<string[]>;
    /**
     * @deprecated
     * Downloads all of a users favorites.
     */
    downloadFavorites: (userResolvable: string | number, dest?: string, limit?: number) => Promise<string[]>;
    /**
     * Downloads all the tracks in a playlist.
     */
    downloadPlaylist: (playlistResolvable: string, dest?: string, limit?: number) => Promise<string[]>;
    /**
     * Same as downloadTrack, but it returns a readable stream.
     */
    streamTrack: (trackResolvable: string | SoundcloudTrack | SoundcloudTrackV2, folder?: string) => Promise<fs.ReadStream>;
    /**
     * Downloads a track's song cover.
     */
    downloadSongCover: (trackResolvable: string | SoundcloudTrack | SoundcloudTrackV2, folder?: string) => Promise<string>;
    /**
     * Utility for awaiting a stream.Writable
     */
    private readonly awaitStream;
    /**
     * Removes a directory recursively
     */
    private readonly removeDirectory;
}
